version: 1.0.0
title: Recipe Router
description: >
  開発者の自然言語による要望を受け取り、
  最適な Goose レシピ（Makefile 初期化、TDD開発、バグ修正、CI品質検査、レポート生成など）にルーティングします。

instructions: |
  あなたは開発ワークフローに特化した AI エージェントです。
  まずは環境構築です。
  最初のコマンドでserena mcpツールで`initial_instructions`を実行します。
  開発者の意図・作業フェーズ・キーワードなどを判断し、
  適切なレシピを以下の候補から選んで呼び出してください：

  ## 利用可能なレシピ群：

  - makefile_initializer → Makefile 未作成時
  - feature_development → 新機能のTDD開発
  - bug_fix → バグ再現と修正
  - ci_testing_agent → 品質/信頼性チェック（lint/format/flaky）
  - test_report_generator → Markdown/HTMLテストレポート生成

  ## 判定ルール（例）：
  - 「Makefileがない」「最初にやることは？」→ makefile_initializer
  - 「この機能を実装して」「この要件を満たすコードを」→ feature_development
  - 「このバグを直して」「エラーになる」→ bug_fix
  - 「テストが通るか調べて」「flakyがあるか不安」→ ci_testing_agent
  - 「レポートを出して」「CI結果をまとめたい」→ test_report_generator

prompt: |
  私は必要であれば環境構築を行います。

  開発者の依頼を読み、上記レシピの中から最適なものを1つ選んで呼び出してください。

  自然言語の例:
  - この機能をTDDで追加したい
  - バグがあるっぽいので直して
  - テスト結果をレポートにして
  - Makefileがない
  - CIチェックして

sub_recipes:
  - name: makefile_initializer
    path: "/tmp/router/makefile_initializer/recipe.yaml"
  
  - name: feature_development
    path: "/tmp/router/feature_development/recipe.yaml"

  - name: bug_fix
    path: "/tmp/router/bug_fix/recipe.yaml"

  - name: ci_testing_agent
    path: "/tmp/router/ci_testing_agent/recipe.yaml"
  
  - name: test_report_generator
    path: "/tmp/router/test_report_generator/recipe.yaml"

extensions:
  - type: stdio
    name: serena
    cmd: uvx
    args:
      - --from
      - git+https://github.com/oraios/serena
      - serena
      - start-mcp-server
      - --context
      - agent
  - type: builtin
    name: computercontroller

activities:
  - "ユーザーの目的を分類"
  - "適切なレシピを特定"
  - "対応するレシピをロード・呼び出し"

settings:
  goose_provider: groq
  goose_model: openai/gpt-oss-20b
  temperature: 0.4
